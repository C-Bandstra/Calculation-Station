{"version":3,"sources":["Components/CalculationBoard/CalculationBoard.js","Components/Keyboard/Keyboard.js","Components/ResultScreen/ResultScreen.js","apiCalls.js","Components/Calculator/Calculator.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["CalculationBoard","currentState","className","fetchedCalculations","map","sequence","i","Keyboard","clearResult","updateShadow","currentSequence","storeResult","calculate","allClear","storeKey","updateCalculations","evaluate","a","result","updatedCalculations","calculations","grabKey","e","preventDefault","target","innerText","handleNumber","key","shadowTest","handleSymbol","regex","stringedSequence","toString","includes","test","onClick","event","ResultScreen","shadowResult","fetchCalculations","fetch","response","json","data","addCalculation","calculation","method","headers","body","JSON","stringify","calculationsResponse","console","error","Parser","require","Calculator","props","setState","beautifyResult","toFixed","Math","trunc","beautifySequence","split","join","state","replaceChar","oldChar","newChar","indexOf","index","input","sendCalculation","clickedKey","symbol","updatedState","checkSequence","this","Component","App","componentDidMount","startLiveUpdate","startFetch","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd2df99a.chunk.js","sourcesContent":["import React from 'react';\nimport './CalculationBoard.css';\n\nconst CalculationBoard = ({ currentState }) => {\n\n  const displayCalculations = () => {\n    return currentState.fetchedCalculations.map((sequence, i) => {\n      return (\n        <div key={i} className=\"calc-box\">\n          <p className=\"calculation\">{sequence}</p>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"calculation-board\">\n      {displayCalculations()}\n    </div>\n  )\n}\n\nexport default CalculationBoard","import React from 'react';\nimport './Keyboard.css';\n\nconst Keyboard = ({ \n  clearResult,\n  updateShadow,\n  currentSequence,\n  storeResult,\n  calculate,\n  allClear,\n  storeKey,\n  updateCalculations, }) => {\n\n  const evaluate = async () => {\n    let result = calculate();\n    let updatedCalculations = await storeResult(result, currentSequence);\n    updateCalculations(updatedCalculations.calculations);\n  }\n\n  const grabKey = (e) => {\n    e.preventDefault();\n    return e.target.innerText;\n  }\n\n  const handleNumber = async (e) => {\n    let key = grabKey(e);\n    clearResult();\n    await storeKey(key);\n    var regex = /\\d/g;\n    shadowTest(regex);\n  }\n\n  const handleSymbol = (e) => {\n    let key = grabKey(e);\n    storeKey(key, true);\n  }\n\n  const shadowTest = (regex) => {\n    let stringedSequence = currentSequence.toString();\n    if(stringedSequence.includes('(') && !stringedSequence.includes((')'))) {\n      return currentSequence;\n    }\n\n    if(regex.test(currentSequence)) {\n      let result = calculate();\n      updateShadow(result);\n    }\n  }\n\n  return(\n    <div className=\"keyboard\">\n      <section className=\"key-row row-1\">\n        <button onClick={() => allClear()} className=\"key\"> AC </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> ( </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> ) </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> รท </button>\n      </section>\n\n      <section className=\"key-row row-2\">\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 7 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 8 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 9 </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> x </button>\n      </section>\n\n      <section className=\"key-row row-3\">\n        <button onClick={(event) => handleNumber(event)} className=\"key \"> 4 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 5 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 6 </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> - </button>\n      </section>\n\n      <section className=\"key-row row-4\">\n        <button onClick={(event) => handleNumber(event)} className=\"key \"> 1 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 2 </button>\n        <button onClick={(event) => handleNumber(event)} className=\"key\"> 3 </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> + </button>\n      </section>\n\n      <section className=\"key-row row-5\">\n        <button onClick={(event) => handleNumber(event)} className=\"key zero-key\"> 0 </button>\n        <button onClick={(event) => handleSymbol(event)} className=\"key\"> . </button>\n        <button onClick={() => {evaluate()}} className=\"key\"> = </button>\n      </section>\n    </div>\n  )\n}\n\nexport default Keyboard;","import React from 'react';\nimport './ResultScreen.css';\n\nconst ResultScreen = ({ shadowResult, result, currentSequence }) => {\n\n  return (\n    <div className=\"result-screen\">\n      <p  className={`input-display ${result ? \"hidden\" : ''}`}>{currentSequence}</p>\n      <p  className={`shadow-result ${result ? \"hidden\" : ''}`}>{shadowResult}</p>\n      <p  className={`result ${result ? '' : \"hidden\"}`}>{result}</p>\n    </div>\n  )\n}\n\nexport default ResultScreen","export const fetchCalculations = async () => {\n  const response = await fetch('https://calculation-station.herokuapp.com/calculations')\n    const data = await response.json();\n    return data;\n}\n\nexport const addCalculation = async (calculation) => {\n  calculation = {\"sequence\": calculation};\n  try {\n    const response = await fetch(\n      \"https://calculation-station.herokuapp.com/addCalculation\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify(calculation),\n      }\n    );\n    const calculationsResponse = await response.json(calculation);\n    return calculationsResponse;\n  } catch (error) {\n    console.error(error);\n  }\n};","//CALCULATION ERROR OCCURS WHEN INPUTING 2 OR MORE SIMILAR OPERATORS IN ONE SEQUENCE,\n//THIS IS BECAUSE THE INDEXOF() IS FINDING THE FIRST CHARACTER MATCHING INSTEAD OF BOTH\n//Ref: Line 61\n\nimport React, { Component } from 'react';\nimport './Calculator.css';\nimport Keyboard from \"../Keyboard/Keyboard\";\nimport ResultScreen from \"../ResultScreen/ResultScreen\";\nimport { addCalculation } from '../../apiCalls';\n\nconst Parser = require('expr-eval').Parser;\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSequence: '',\n      result: '',\n      shadowResult: '',\n    }\n  }\n\n  allClear = () => {\n    this.setState({\n      currentSequence: '',\n      result: '',\n      shadowResult: '',\n    })\n  }\n\n  beautifyResult = (result) => {\n    result = result.toFixed(3);\n    result = result % 1 === 0 ? Math.trunc(result) : result;\n    return result;\n  }\n\n  beautifySequence = (sequence) => {\n    const beautifiedSequence = sequence.split('').join(' ');\n    return beautifiedSequence;\n  }\n\n  calculate = () => {\n    let sequence = this.state.currentSequence\n    sequence = this.replaceChar(sequence, 'x', '*');\n    sequence = this.replaceChar(sequence, 'รท', '/');\n    let result = Parser.evaluate(sequence);\n    if(result == 'Infinity') {\n      result = 0;\n    }\n    result = this.beautifyResult(result);\n    return result;\n  }\n\n  clearResult = () => {\n    this.setState({\n      result: '',\n    })\n  }\n\n  replaceChar = (sequence, oldChar, newChar) => {\n    if(sequence.indexOf(oldChar)) {\n      let index = sequence.indexOf(oldChar);\n      let input = sequence.split('');\n      input[index] = newChar;\n      return input.join('');\n    }\n  }\n\n  sendCalculation = async (result, sequence) => {\n    sequence = this.beautifySequence(sequence);\n    const calculation = `${sequence} = ${result}`;\n    const calculations = await addCalculation(calculation);\n    return calculations;\n  }\n\n  storeKey = (clickedKey, symbol) => {\n    let currentState = this.state.currentSequence;\n    let updatedState = this.checkSequence(currentState, clickedKey, symbol);\n    this.setState({\n      currentSequence: updatedState,\n    })\n  }\n\n  checkSequence = (currentState, clickedKey, symbol) => {\n    if(symbol || this.state.result !== this.state.currentSequence) {\n      return currentState += clickedKey;\n    } else {\n      return clickedKey;\n    }\n  }\n\n  storeResult = (result, sequence) => {\n    this.setState({\n      currentSequence: result,\n      result: result\n    })\n    const calculations = this.sendCalculation(result, sequence);\n    this.clearResult()\n    return calculations;\n  }\n\n  updateShadow = (shadowResult) => {\n    this.setState({\n      shadowResult: shadowResult\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <ResultScreen shadowResult={this.state.shadowResult} result={this.state.result} currentSequence={this.state.currentSequence} />\n        <Keyboard updateCalculations={this.props.updateCalculations} clearResult={this.clearResult} updateShadow={this.updateShadow} currentSequence={this.state.currentSequence} storeResult={this.storeResult} calculate={this.calculate} allClear={this.allClear} storeKey={this.storeKey} />\n      </div>\n    )\n  }\n}\n\nexport default Calculator;","import React, { Component } from 'react';\nimport CalculationBoard from '../CalculationBoard/CalculationBoard';\nimport Calculator from \"../Calculator/Calculator\";\nimport { fetchCalculations } from '../../apiCalls';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fetchedCalculations: [],\n    }\n  }\n  \n  componentDidMount = async () => {\n    this.startLiveUpdate()\n    const calculations = await fetchCalculations();\n    this.startFetch(calculations)\n  }\n\n  startLiveUpdate = () => {\n    setInterval(async () => {\n      const calculations = await fetchCalculations()\n      this.startFetch(calculations)\n    }, 3000)\n  }\n\n  startFetch = (calculations) => {\n    this.setState({\n      fetchedCalculations: calculations,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"components\">\n          <CalculationBoard currentState={this.state}/>\n          <Calculator updateCalculations={this.startFetch}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}